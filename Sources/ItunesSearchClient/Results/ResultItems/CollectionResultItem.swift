/*
CollectionResultItem provides decoding of the json results of the ItunesSearchClient
Generated by Evan McKee on 14/11/2019
*/

import Foundation

public class CollectionResultItem: ResultItem {
    public var artistId: Int?
    public var artistName: String?
    public var artistViewUrl: URL?
    public var artworkUrl100: URL?
    public var artworkUrl30: URL?
    public var artworkUrl60: URL?
    public var collectionCensoredName: String?
    public var collectionExplicitness: String?
    public var collectionId: Int
    public var collectionName: String?
    public var collectionPrice: Decimal?
    public var collectionType: String?
    public var collectionViewUrl: URL?
    public var contentAdvisoryRating: String?
    public var copyright: String?
    public var country: String?
    public var currency: String?
    public var primaryGenreName: String?
    public var releaseDate: Date?
    public var trackCount: Int?

    override public var id: Int {
        return collectionId
    }

    public required init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CollectionCodingKeys.self)
        self.artistId = try values.decodeIfPresent(Int.self, forKey: .artistId)
        self.artistName = try values.decodeIfPresent(String.self, forKey: .artistName)
        self.artistViewUrl = try values.decodeIfPresent(URL.self, forKey: .artistViewUrl)
        self.artworkUrl100 = try values.decodeIfPresent(URL.self, forKey: .artworkUrl100)
        self.artworkUrl30 = try values.decodeIfPresent(URL.self, forKey: .artworkUrl30)
        self.artworkUrl60 = try values.decodeIfPresent(URL.self, forKey: .artworkUrl60)
        self.collectionCensoredName = try values.decodeIfPresent(String.self, forKey: .collectionCensoredName)
        self.collectionExplicitness = try values.decodeIfPresent(String.self, forKey: .collectionExplicitness)
        self.collectionId = try values.decode(Int.self, forKey: .collectionId)
        self.collectionName = try values.decodeIfPresent(String.self, forKey: .collectionName)
        self.collectionPrice = try values.decodeIfPresent(Decimal.self, forKey: .collectionPrice)
        self.collectionType = try values.decodeIfPresent(String.self, forKey: .collectionType)
        self.collectionViewUrl = try values.decodeIfPresent(URL.self, forKey: .collectionViewUrl)
        self.contentAdvisoryRating = try values.decodeIfPresent(String.self, forKey: .contentAdvisoryRating)
        self.copyright = try values.decodeIfPresent(String.self, forKey: .copyright)
        self.country = try values.decodeIfPresent(String.self, forKey: .country)
        self.currency = try values.decodeIfPresent(String.self, forKey: .currency)
        self.primaryGenreName = try values.decodeIfPresent(String.self, forKey: .primaryGenreName)
        if let releaseDateString = try values.decodeIfPresent(String.self, forKey: .releaseDate) {
            self.releaseDate = ISO8601DateFormatter.default.date(from: releaseDateString)
        } else {
            self.releaseDate = nil
        }
        self.trackCount = try values.decodeIfPresent(Int.self, forKey: .trackCount)
        try super.init(from: decoder)
    }
    
    enum CollectionCodingKeys:String, CodingKey {
        case artistId, artistName, artistViewUrl, artworkUrl100, artworkUrl30, artworkUrl60, collectionCensoredName, collectionExplicitness, collectionId, collectionName, collectionPrice, collectionType, collectionViewUrl, contentAdvisoryRating, copyright, country, currency, primaryGenreName, releaseDate, trackCount, wrapperType
    }
}
