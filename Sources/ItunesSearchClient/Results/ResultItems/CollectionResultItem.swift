/*
CollectionResultItem provides decoding of the json results of the ItunesSearchClient
Generated by Evan McKee on 14/11/2019
*/

import Foundation

public protocol CollectionResultItem: ResultItem {
    var artistId: Int? {get}
    var artistName: String? {get}
    var artistViewUrl: URL? {get}
    var artworkUrl100: URL? {get}
    var artworkUrl60: URL? {get}
    var collectionCensoredName: String? {get}
    var collectionExplicitness: String? {get}
    var collectionId: Int? {get}
    var collectionName: String? {get}
    var collectionPrice: Decimal? {get}
    var collectionType: String? {get}
    var collectionViewUrl: URL? {get}
    var contentAdvisoryRating: String? {get}
    var copyright: String? {get}
    var country: String? {get}
    var currency: String? {get}
    var primaryGenreName: String? {get}
    var releaseDate: Date? {get}
    var trackCount: Int? {get}
    var wrapperType: ItunesWrapperType {get}
}

//extension CollectionResultItem {
//    public init(from decoder: Decoder) throws {
//        let values = try decoder.container(keyedBy: CollectionCodingKeys.self)
//        self.artistId = try values.decodeIfPresent(Int.self, forKey: .artistId)
//        self.artistName = try values.decodeIfPresent(String.self, forKey: .artistName)
//        self.artistViewUrl = try values.decodeIfPresent(URL.self, forKey: .artistViewUrl)
//        self.artworkUrl100 = try values.decodeIfPresent(URL.self, forKey: .artworkUrl100)
//        self.artworkUrl60 = try values.decodeIfPresent(URL.self, forKey: .artworkUrl60)
//        self.collectionCensoredName = try values.decodeIfPresent(String.self, forKey: .collectionCensoredName)
//        self.collectionExplicitness = try values.decodeIfPresent(String.self, forKey: .collectionExplicitness)
//        self.collectionId = try values.decodeIfPresent(Int.self, forKey: .collectionId)
//        self.collectionName = try values.decodeIfPresent(String.self, forKey: .collectionName)
//        self.collectionPrice = try values.decodeIfPresent(Decimal.self, forKey: .collectionPrice)
//        self.collectionType = try values.decodeIfPresent(String.self, forKey: .collectionType)
//        self.collectionViewUrl = try values.decodeIfPresent(URL.self, forKey: .collectionViewUrl)
//        self.contentAdvisoryRating = try values.decodeIfPresent(String.self, forKey: .contentAdvisoryRating)
//        self.copyright = try values.decodeIfPresent(String.self, forKey: .copyright)
//        self.country = try values.decodeIfPresent(String.self, forKey: .country)
//        self.currency = try values.decodeIfPresent(String.self, forKey: .currency)
//        self.primaryGenreName = try values.decodeIfPresent(String.self, forKey: .primaryGenreName)
//        if let releaseDateString = try values.decodeIfPresent(String.self, forKey: .releaseDate) {
//            self.releaseDate = ISO8601DateFormatter.default.date(from: releaseDateString)
//        } else {
//            self.releaseDate = nil
//        }
//        self.trackCount = try values.decodeIfPresent(Int.self, forKey: .trackCount)
//        self.wrapperType = try values.decode(WrapperType.self, forKey: .wrapperType)
//    }
//}


enum CollectionCodingKeys:String, CodingKey {
    case artistId, artistName, artistViewUrl, artworkUrl100, artworkUrl60, collectionCensoredName, collectionExplicitness, collectionId, collectionName, collectionPrice, collectionType, collectionViewUrl, contentAdvisoryRating, copyright, country, currency, primaryGenreName, releaseDate, trackCount, wrapperType
}
//public class CollectionResultItem: ResultItem {
//    public let artistId: Int?
//    public let artistName: String?
//    public let artistViewUrl: URL?
//    public let artworkUrl100: URL?
//    public let artworkUrl60: URL?
//    public let collectionCensoredName: String?
//    public let collectionExplicitness: String?
//    public let collectionId: Int?
//    public let collectionName: String?
//    public let collectionPrice: Decimal?
//    public let collectionType: String?
//    public let collectionViewUrl: URL?
//    public let contentAdvisoryRating: String?
//    public let copyright: String?
//    public let country: String?
//    public let currency: String?
//    public let primaryGenreName: String?
//    public let releaseDate: Date?
//    public let trackCount: Int?
//    public let wrapperType: WrapperType
//
//    public enum CollectionCodingKeys:String, CodingKey {
//        case artistId, artistName, artistViewUrl, artworkUrl100, artworkUrl60, collectionCensoredName, collectionExplicitness, collectionId, collectionName, collectionPrice, collectionType, collectionViewUrl, contentAdvisoryRating, copyright, country, currency, primaryGenreName, releaseDate, trackCount, wrapperType
//    }
//    required public init(from decoder: Decoder) throws {
//        let values = try decoder.container(keyedBy: CollectionCodingKeys.self)
//        self.artistId = try values.decodeIfPresent(Int.self, forKey: .artistId)
//        self.artistName = try values.decodeIfPresent(String.self, forKey: .artistName)
//        self.artistViewUrl = try values.decodeIfPresent(URL.self, forKey: .artistViewUrl)
//        self.artworkUrl100 = try values.decodeIfPresent(URL.self, forKey: .artworkUrl100)
//        self.artworkUrl60 = try values.decodeIfPresent(URL.self, forKey: .artworkUrl60)
//        self.collectionCensoredName = try values.decodeIfPresent(String.self, forKey: .collectionCensoredName)
//        self.collectionExplicitness = try values.decodeIfPresent(String.self, forKey: .collectionExplicitness)
//        self.collectionId = try values.decodeIfPresent(Int.self, forKey: .collectionId)
//        self.collectionName = try values.decodeIfPresent(String.self, forKey: .collectionName)
//        self.collectionPrice = try values.decodeIfPresent(Decimal.self, forKey: .collectionPrice)
//        self.collectionType = try values.decodeIfPresent(String.self, forKey: .collectionType)
//        self.collectionViewUrl = try values.decodeIfPresent(URL.self, forKey: .collectionViewUrl)
//        self.contentAdvisoryRating = try values.decodeIfPresent(String.self, forKey: .contentAdvisoryRating)
//        self.copyright = try values.decodeIfPresent(String.self, forKey: .copyright)
//        self.country = try values.decodeIfPresent(String.self, forKey: .country)
//        self.currency = try values.decodeIfPresent(String.self, forKey: .currency)
//        self.primaryGenreName = try values.decodeIfPresent(String.self, forKey: .primaryGenreName)
//        if let releaseDateString = try values.decodeIfPresent(String.self, forKey: .releaseDate) {
//            self.releaseDate = ISO8601DateFormatter.default.date(from: releaseDateString)
//        } else {
//            self.releaseDate = nil
//        }
//        self.trackCount = try values.decodeIfPresent(Int.self, forKey: .trackCount)
//        self.wrapperType = try values.decode(WrapperType.self, forKey: .wrapperType)
//    }
//}

