/*
SoftwareResultItem provides decoding of the json results of the ItunesSearchClient
Generated by Evan McKee on 14/11/2019
*/

import Foundation


public class SoftwareResultItem: ResultItem {
    public let advisories: [String]?
    public let appletvScreenshotUrls: [URL]?
    public let artistId: Int?
    public let artistName: String?
    public let artistViewUrl: URL?
    public let artworkUrl100: URL?
    public let artworkUrl512: URL?
    public let artworkUrl60: URL?
    public let averageUserRating: Decimal?
    public let averageUserRatingForCurrentVersion: Decimal?
    public let bundleId: String?
    public let contentAdvisoryRating: String?
    public let currency: String?
    public let currentVersionReleaseDate: Date?
    public let description: String?
    public let features: [String]?
    public let fileSizeBytes: String?
    public let formattedPrice: String?
    public let genreIds: [String]?
    public let genres: [String]?
    public let ipadScreenshotUrls: [URL]?
    public let isGameCenterEnabled: Bool?
    public let isVppDeviceBasedLicensingEnabled: Bool?
    public let kind: ItunesResultKind
    public let languageCodesISO2A: [String]?
    public let minimumOsVersion: String?
    public let price: Decimal?
    public let primaryGenreId: Int?
    public let primaryGenreName: String?
    public let releaseDate: Date?
    public let releaseNotes: String?
    public let screenshotUrls: [URL]?
    public let sellerName: String?
    public let sellerUrl: URL?
    public let supportedDevices: [String]?
    public let trackCensoredName: String?
    public let trackContentRating: String?
    public let trackId: Int
    public let trackName: String?
    public let trackViewUrl: URL?
    public let userRatingCount: Int?
    public let userRatingCountForCurrentVersion: Int?
    public let version: String?
    
    public override var id: Int {
        return trackId
    }

    public required init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: SoftwareCodingKeys.self)
        self.advisories = try values.decodeIfPresent([String].self, forKey: .advisories)
        self.appletvScreenshotUrls = try values.decodeIfPresent([URL].self, forKey: .appletvScreenshotUrls)
        self.artistId = try values.decodeIfPresent(Int.self, forKey: .artistId)
        self.artistName = try values.decodeIfPresent(String.self, forKey: .artistName)
        self.artistViewUrl = try values.decodeIfPresent(URL.self, forKey: .artistViewUrl)
        self.artworkUrl100 = try values.decodeIfPresent(URL.self, forKey: .artworkUrl100)
        self.artworkUrl512 = try values.decodeIfPresent(URL.self, forKey: .artworkUrl512)
        self.artworkUrl60 = try values.decodeIfPresent(URL.self, forKey: .artworkUrl60)
        self.averageUserRating = try values.decodeIfPresent(Decimal.self, forKey: .averageUserRating)
        self.averageUserRatingForCurrentVersion = try values.decodeIfPresent(Decimal.self, forKey: .averageUserRatingForCurrentVersion)
        self.bundleId = try values.decodeIfPresent(String.self, forKey: .bundleId)
        self.contentAdvisoryRating = try values.decodeIfPresent(String.self, forKey: .contentAdvisoryRating)
        self.currency = try values.decodeIfPresent(String.self, forKey: .currency)
        if let currentVersionReleaseDateString = try values.decodeIfPresent(String.self, forKey: .currentVersionReleaseDate) {
            self.currentVersionReleaseDate = ISO8601DateFormatter.default.date(from: currentVersionReleaseDateString)
        } else {
            self.currentVersionReleaseDate = nil
        }
        self.description = try values.decodeIfPresent(String.self, forKey: .description)
        self.features = try values.decodeIfPresent([String].self, forKey: .features)
        self.fileSizeBytes = try values.decodeIfPresent(String.self, forKey: .fileSizeBytes)
        self.formattedPrice = try values.decodeIfPresent(String.self, forKey: .formattedPrice)
        self.genreIds = try values.decodeIfPresent([String].self, forKey: .genreIds)
        self.genres = try values.decodeIfPresent([String].self, forKey: .genres)
        self.ipadScreenshotUrls = try values.decodeIfPresent([URL].self, forKey: .ipadScreenshotUrls)
        self.isGameCenterEnabled = try values.decodeIfPresent(Bool.self, forKey: .isGameCenterEnabled)
        self.isVppDeviceBasedLicensingEnabled = try values.decodeIfPresent(Bool.self, forKey: .isVppDeviceBasedLicensingEnabled)
        self.kind = try values.decode(ItunesResultKind.self, forKey: .kind)
        self.languageCodesISO2A = try values.decodeIfPresent([String].self, forKey: .languageCodesISO2A)
        self.minimumOsVersion = try values.decodeIfPresent(String.self, forKey: .minimumOsVersion)
        self.price = try values.decodeIfPresent(Decimal.self, forKey: .price)
        self.primaryGenreId = try values.decodeIfPresent(Int.self, forKey: .primaryGenreId)
        self.primaryGenreName = try values.decodeIfPresent(String.self, forKey: .primaryGenreName)
        if let releaseDateString = try values.decodeIfPresent(String.self, forKey: .releaseDate) {
            self.releaseDate = ISO8601DateFormatter.default.date(from: releaseDateString)
        } else {
            self.releaseDate = nil
        }
        self.releaseNotes = try values.decodeIfPresent(String.self, forKey: .releaseNotes)
        self.screenshotUrls = try values.decodeIfPresent([URL].self, forKey: .screenshotUrls)
        self.sellerName = try values.decodeIfPresent(String.self, forKey: .sellerName)
        self.sellerUrl = try values.decodeIfPresent(URL.self, forKey: .sellerUrl)
        self.supportedDevices = try values.decodeIfPresent([String].self, forKey: .supportedDevices)
        self.trackCensoredName = try values.decodeIfPresent(String.self, forKey: .trackCensoredName)
        self.trackContentRating = try values.decodeIfPresent(String.self, forKey: .trackContentRating)
        self.trackId = try values.decode(Int.self, forKey: .trackId)
        self.trackName = try values.decodeIfPresent(String.self, forKey: .trackName)
        self.trackViewUrl = try values.decodeIfPresent(URL.self, forKey: .trackViewUrl)
        self.userRatingCount = try values.decodeIfPresent(Int.self, forKey: .userRatingCount)
        self.userRatingCountForCurrentVersion = try values.decodeIfPresent(Int.self, forKey: .userRatingCountForCurrentVersion)
        self.version = try values.decodeIfPresent(String.self, forKey: .version)
        try super.init(from: decoder)
    }
    
    public enum SoftwareCodingKeys:String, CodingKey {
        case advisories, appletvScreenshotUrls, artistId, artistName, artistViewUrl, artworkUrl100, artworkUrl512, artworkUrl60, averageUserRating, averageUserRatingForCurrentVersion, bundleId, contentAdvisoryRating, currency, currentVersionReleaseDate, description, features, fileSizeBytes, formattedPrice, genreIds, genres, ipadScreenshotUrls, isGameCenterEnabled, isVppDeviceBasedLicensingEnabled, kind, languageCodesISO2A, minimumOsVersion, price, primaryGenreId, primaryGenreName, releaseDate, releaseNotes, screenshotUrls, sellerName, sellerUrl, supportedDevices, trackCensoredName, trackContentRating, trackId, trackName, trackViewUrl, userRatingCount, userRatingCountForCurrentVersion, version, wrapperType
    }
}

