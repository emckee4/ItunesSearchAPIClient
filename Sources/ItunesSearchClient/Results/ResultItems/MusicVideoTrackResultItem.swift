/*
MusicVideoTrackResultItem provides decoding of the json results of the ItunesSearchClient
Generated by Evan McKee on 14/11/2019
*/

import Foundation


public struct MusicVideoTrackResultItem: ResultItem {
    public let previewUrl: URL?
    public let trackTimeMillis: Int?
    
    public let artistId: Int?
    public let artistName: String
    public let artistViewUrl: URL?
    public let artworkUrl100: URL?
    public let artworkUrl30: URL?
    public let artworkUrl60: URL?
    public let collectionExplicitness: String?
    public let collectionPrice: Decimal?
    public let contentAdvisoryRating: String?
    public let country: String?
    public let currency: String?
    public let kind: ItunesResultKind
    public let primaryGenreName: String?
    public let releaseDate: Date?
    public let trackCensoredName: String?
    public let trackExplicitness: String?
    public let trackId: Int?
    public let trackName: String?
    public let trackPrice: Decimal?
    public let trackViewUrl: URL?
    public let wrapperType: ItunesWrapperType

    public enum MusicVideoTrackCodingKeys:String, CodingKey {
        case previewUrl, trackTimeMillis
    }
    public init(from decoder: Decoder) throws {
        let trackValues = try decoder.container(keyedBy: TrackResultCodingKeys.self)
        self.artistId = try trackValues.decodeIfPresent(Int.self, forKey: .artistId)
        self.artistName = try trackValues.decode(String.self, forKey: .artistName)
        self.artistViewUrl = try trackValues.decodeIfPresent(URL.self, forKey: .artistViewUrl)
        self.artworkUrl100 = try trackValues.decodeIfPresent(URL.self, forKey: .artworkUrl100)
        self.artworkUrl30 = try trackValues.decodeIfPresent(URL.self, forKey: .artworkUrl30)
        self.artworkUrl60 = try trackValues.decodeIfPresent(URL.self, forKey: .artworkUrl60)
        self.collectionExplicitness = try trackValues.decodeIfPresent(String.self, forKey: .collectionExplicitness)
        self.collectionPrice = try trackValues.decodeIfPresent(Decimal.self, forKey: .collectionPrice)
        self.contentAdvisoryRating = try trackValues.decodeIfPresent(String.self, forKey: .contentAdvisoryRating)
        self.country = try trackValues.decodeIfPresent(String.self, forKey: .country)
        self.currency = try trackValues.decodeIfPresent(String.self, forKey: .currency)
        self.kind = try trackValues.decode(ItunesResultKind.self, forKey: .kind)
        self.primaryGenreName = try trackValues.decodeIfPresent(String.self, forKey: .primaryGenreName)
        if let releaseDateString = try trackValues.decodeIfPresent(String.self, forKey: .releaseDate) {
            self.releaseDate = ISO8601DateFormatter.default.date(from: releaseDateString)
        } else {
            self.releaseDate = nil
        }
        self.trackCensoredName = try trackValues.decodeIfPresent(String.self, forKey: .trackCensoredName)
        self.trackExplicitness = try trackValues.decodeIfPresent(String.self, forKey: .trackExplicitness)
        self.trackId = try trackValues.decodeIfPresent(Int.self, forKey: .trackId)
        self.trackName = try trackValues.decodeIfPresent(String.self, forKey: .trackName)
        self.trackPrice = try trackValues.decodeIfPresent(Decimal.self, forKey: .trackPrice)
        self.trackViewUrl = try trackValues.decodeIfPresent(URL.self, forKey: .trackViewUrl)
        self.wrapperType = try trackValues.decode(ItunesWrapperType.self, forKey: .wrapperType)
        
        let values = try decoder.container(keyedBy: MusicVideoTrackCodingKeys.self)
        self.previewUrl = try values.decodeIfPresent(URL.self, forKey: .previewUrl)
        self.trackTimeMillis = try values.decodeIfPresent(Int.self, forKey: .trackTimeMillis)
    }
}

