/*
AudioBookResultItem provides decoding of the json results of the ItunesSearchClient
Generated by Evan McKee on 14/11/2019
*/

import Foundation


public struct AudioBookResultItem: ResultItem {
    public let amgArtistId: Int?
    public let artistId: Int?
    public let artistName: String?
    public let artistViewUrl: URL?
    public let artworkUrl100: URL?
    public let artworkUrl60: URL?
    public let collectionCensoredName: String?
    public let collectionExplicitness: String?
    public let collectionId: Int?
    public let collectionName: String?
    public let collectionPrice: Decimal?
    public let collectionViewUrl: URL?
    public let copyright: String?
    public let country: String?
    public let currency: String?
    public let description: String?
    public let previewUrl: URL?
    public let primaryGenreName: String?
    public let releaseDate: Date?
    public let trackCount: Int?
    public let wrapperType: ItunesWrapperType

    public enum AudioBookCodingKeys:String, CodingKey {
        case amgArtistId, artistId, artistName, artistViewUrl, artworkUrl100, artworkUrl60, collectionCensoredName, collectionExplicitness, collectionId, collectionName, collectionPrice, collectionViewUrl, copyright, country, currency, description, previewUrl, primaryGenreName, releaseDate, trackCount, wrapperType
    }
    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: AudioBookCodingKeys.self)
        self.amgArtistId = try values.decodeIfPresent(Int.self, forKey: .amgArtistId)
        self.artistId = try values.decodeIfPresent(Int.self, forKey: .artistId)
        self.artistName = try values.decodeIfPresent(String.self, forKey: .artistName)
        self.artistViewUrl = try values.decodeIfPresent(URL.self, forKey: .artistViewUrl)
        self.artworkUrl100 = try values.decodeIfPresent(URL.self, forKey: .artworkUrl100)
        self.artworkUrl60 = try values.decodeIfPresent(URL.self, forKey: .artworkUrl60)
        self.collectionCensoredName = try values.decodeIfPresent(String.self, forKey: .collectionCensoredName)
        self.collectionExplicitness = try values.decodeIfPresent(String.self, forKey: .collectionExplicitness)
        self.collectionId = try values.decodeIfPresent(Int.self, forKey: .collectionId)
        self.collectionName = try values.decodeIfPresent(String.self, forKey: .collectionName)
        self.collectionPrice = try values.decodeIfPresent(Decimal.self, forKey: .collectionPrice)
        self.collectionViewUrl = try values.decodeIfPresent(URL.self, forKey: .collectionViewUrl)
        self.copyright = try values.decodeIfPresent(String.self, forKey: .copyright)
        self.country = try values.decodeIfPresent(String.self, forKey: .country)
        self.currency = try values.decodeIfPresent(String.self, forKey: .currency)
        self.description = try values.decodeIfPresent(String.self, forKey: .description)
        self.previewUrl = try values.decodeIfPresent(URL.self, forKey: .previewUrl)
        self.primaryGenreName = try values.decodeIfPresent(String.self, forKey: .primaryGenreName)
        if let releaseDateString = try values.decodeIfPresent(String.self, forKey: .releaseDate) {
            self.releaseDate = ISO8601DateFormatter.default.date(from: releaseDateString)
        } else {
            self.releaseDate = nil
        }
        self.trackCount = try values.decodeIfPresent(Int.self, forKey: .trackCount)
        self.wrapperType = try values.decode(ItunesWrapperType.self, forKey: .wrapperType)
    }
}
